---
// @ts-expect-error - Some types can only be imported from the Astro runtime
import { PageData, PageContent, SiteConfig, db, eq } from 'astro:db';
import { Layout } from 'studiocms-dashboard:components';
import Config from 'virtual:studiocms/config';
import { authHelper, urlGenFactory, type Locals } from 'studiocms:helpers';

if (Config.includedIntegrations.useInoxSitemap) {
    import('sitemap-ext:config').then((sitemap) => {
        sitemap.default(false)
    })
}

const { dashboardConfig: { developerConfig, dashboardRouteOverride } } = Config;

const { slug } = Astro.params;

const ConfigArray = await db.select().from(SiteConfig);
const currentPageContent = await db.select().from(PageContent).innerJoin(PageData, eq(PageContent.contentId, PageData.id)).get();
const { PageContent: PC, PageData: PD } = currentPageContent;

if (!slug || !PD.id) {
	return Astro.redirect(await urlGenFactory(true, undefined, dashboardRouteOverride));
}

const contextConfig = ConfigArray.pop();

const locals = Astro.locals as Locals;
const { permissionLevel } = await authHelper(locals);

// If the user is not logged in, redirect to the login page
if ( !developerConfig.testingAndDemoMode ) {
    if ( permissionLevel === "unknown" ) {
        console.log('User is not logged in. Redirecting to login page.');
        return Astro.redirect(await urlGenFactory(true, "login", dashboardRouteOverride));
    }
    if ( permissionLevel !== 'admin' && permissionLevel !== 'editor' ) {
        console.log('User is not an admin or editor. Redirecting to profile page.');
        return Astro.redirect(await urlGenFactory(true, "profile", dashboardRouteOverride));
    }
}

let showSuccessToast = false;
let showErrorToast = false;

if (Astro.request.method === 'POST' && !developerConfig.testingAndDemoMode) {
  try {
    const data = await Astro.request.formData();
    const title = data.get("title");
    const pack = data.get("package");
    const description = data.get("description");
    const heroImage = data.get("hero-image");
    const content = data.get("content");

    await db.update(PageData).set({ 
        title: title as string,
        package: pack as string,
        description: description as string,
        heroImage: heroImage as string,
    }).where(eq(PageData.slug, slug)).then(async () => {
        const currentPageContent = await db.select().from(PageContent).innerJoin(PageData, eq(PageContent.contentId, PageData.id)).get();
        await db.update(PageContent).set({ 
            content: content as string 
        }).where(eq(PageContent.contentId, currentPageContent.PageContent.contentId));
    }).catch(() => {
        showErrorToast = true;
    });
    showSuccessToast = true;
  } catch (error) {
    if (error instanceof Error) {
        showErrorToast = true;
    }
  }
}

const LivePreviewPage = await urlGenFactory(true, "api/liverender", dashboardRouteOverride);

const pageTitle = `Edit Page | ${contextConfig.title}`;
---

<Layout 
    sideBarActiveItemID="edit-pages" 
    title={pageTitle}
    description={contextConfig.description} >
    <div class="alert-toast">
        { showSuccessToast && (
        <sl-alert variant="success" duration="3000" open closable>
            <sl-icon slot="icon" name="check2-circle"></sl-icon>
            <strong>Post Edited!</strong><br />
            You can safely leave this page now.
        </sl-alert>
        )}
        { showErrorToast && (
        <sl-alert variant="danger" duration="3000" open closable>
            <sl-icon slot="icon" name="exclamation-octagon"></sl-icon>
            <strong>Error Editing Post</strong><br />
            There was an Error editing the Post. Please try again.
        </sl-alert>
        )}
    </div>

    <div class="container max-w-[100vw] lg:max-w-[1800px] min-w-[75vw]">

        <div class="text-5xl font-bold">Edit Page: {PD.title}</div>

        <div class="py-2 flex justify-center">

                <form method="POST" class="w-full">
                    <sl-input
                        id="title"
                        name="title"
                        value={PD.title}
                        placeholder="Your post title"
                        size="medium"
                        required>
                        <div slot="label" class="text-lg inline">Page Title</div>
                        <sl-icon name="card-heading" slot="prefix"></sl-icon>
                    </sl-input>

                    <sl-select id="package" name="package" value="@astrolicious/studiocms">
                        <div slot="label" class="text-lg inline">Package</div>
                        <sl-option value="@astrolicious/studiocms">@astrolicious/studiocms</sl-option>
                        <sl-option value="not-yet-implemented" disabled>Not Yet Implemented</sl-option>
                      </sl-select>

                    <sl-input
                        id="slug"
                        name="slug"
                        value={PD.slug}
                        disabled="true"
                        placeholder="your-post-slug"
                        size="medium"
                        required>
                        <div slot="label" class="text-lg inline">Slug</div>
                        <sl-icon name="link" slot="prefix"></sl-icon>
                    </sl-input>
                    
                    <sl-input
                        id="description"
                        name="description"
                        value={PD.description}
                        placeholder="Your post's basic description"
                        size="medium"
                        required>
                        <div slot="label" class="text-lg inline">Description</div>
                        <sl-icon name="info-circle" slot="prefix"></sl-icon>
                    </sl-input>

                    <sl-input 
                        id="hero-image" 
                        name="hero-image" 
                        value={PD.heroImage}
                        placeholder="Your Page's Hero Image URL (Also the OGImage)" 
                        size="medium"
                        required>
                        <p slot="help-text" class="text-sm">To use images stored in your public/ folder use the following example: <i>/my-image.png</i></p><br>
                        <div slot="label" class="text-lg inline">Hero Image</div>
                        <sl-icon name="image" slot="prefix"></sl-icon>
                    </sl-input>

                    <sl-textarea 
                        resize="auto"
                        id="content"
                        name="content"
                        value={PC.content}
                        size="large"
                        rows="10"
                        hx-get={LivePreviewPage}
                        hx-trigger="keyup changed delay:500ms"
                        hx-target="#html-preview"
                        placeholder="Your post's content in markdown format."
                        required>
                        <div slot="label" class="text-lg inline">Content</div>
                        {PC.content}
                    </sl-textarea>
                    <br />

                    <sl-button variant="success" type="submit" outline>Update Page!<sl-icon slot="suffix" name="pencil-square"></sl-icon></sl-button>
        
                </form>
        </div>

        <div class="text-xl font-bold">Live Preview</div>
        <div id="html-preview" class="border-solid border-2 border-gray-300 rounded-lg p-2 max-w-[100vw] lg:max-w-[1800px] prose">
            <p>
                Click in the box above to start editing the content. As you type, the preview will update automatically.
            </p>
        </div>
    </div>
</Layout>